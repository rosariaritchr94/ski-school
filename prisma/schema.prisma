// ---------- Generators & Datasource ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum Currency {
  EUR
  USD
}

// ---------- Models ----------
model Booking {
  id String @id @default(cuid())

  // --- Instructor (N:1) ---
  instructorId String
  instructor   Instructor @relation(fields: [instructorId], references: [id])

  // --- LessonType (N:1) ---
  lessonTypeId String
  lessonType   LessonType @relation(fields: [lessonTypeId], references: [id])

  // --- Payment (1:1 opzionale) ---
  paymentId String?  @unique
  payment   Payment? @relation(fields: [paymentId], references: [id])

  date        DateTime
  durationMin Int
  notes       String?  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([instructorId])
  @@index([lessonTypeId])
}

model Instructor {
  id     String @id @default(cuid())
  userId String @unique

  // Back-relation verso Booking
  bookings Booking[]

  firstName String?
  lastName  String?
  bio       String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id String @id @default(cuid())

  // Back-relation 1:1 (l’altro lato è Booking.payment)
  booking Booking?

  amountCents       Int
  currency          Currency      @default(EUR)
  status            PaymentStatus @default(PENDING)
  provider          String
  providerPaymentId String?       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LessonType {
  id          String  @id @default(cuid())
  name        String
  description String? @db.Text
  priceCents  Int

  // Back-relation: un tipo lezione può avere molte prenotazioni
  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
}
